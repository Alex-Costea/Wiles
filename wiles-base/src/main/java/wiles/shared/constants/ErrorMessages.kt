package wiles.shared.constants

object ErrorMessages {
    const val LINE_SYMBOL = "\n>>> "
    const val COMPILATION_FAILED_ERROR = "${LINE_SYMBOL}COMPILATION FAILED$LINE_SYMBOL"
    const val TOKEN_EXPECTED_ERROR = "The token is missing or incorrect. Did you mean %s?"
    const val IDENTIFIER_EXPECTED_ERROR = "The identifier name is invalid or missing."
    const val IDENTIFIER_TOO_LONG_ERROR = "A simple identifier name is expected."
    const val TYPE_EXPECTED_ERROR = "The type definition is unknown."
    const val EXPRESSION_EXPECTED_ERROR = "The expression is invalid or missing."
    const val UNEXPECTED_OPENING_PAREN_ERROR = "Expected a closing parenthesis here."
    const val OPERATOR_EXPECTED_ERROR = "Expected an operator."
    const val EXPRESSION_UNFINISHED_ERROR = "The expression is unfinished."
    const val INVALID_EXPRESSION_ERROR = "The expression starting from this point is invalid."
    const val INVALID_STATEMENT_ERROR = "The statement is invalid."
    const val STRING_UNFINISHED_ERROR = "The text is unfinished."
    const val STRING_ESCAPE_INVALID_ERROR = "The text is escaped incorrectly."
    const val NOT_ENOUGH_TYPES_ERROR = "Not enough types have been specified."
    const val END_OF_STATEMENT_EXPECTED_ERROR = "Expected end of statement. " +
            "Please use the ';' symbol or start a new line."
    const val WRONG_ARGUMENTS_ERROR = "The function cannot be called with these arguments. Reason: "
    const val NO_MATCH_FOR_ERROR = "Nothing matches the \"%s\" identifier name."
    const val CANNOT_MODIFY_IMMUTABLE_ERROR = "Cannot modify an immutable value."
    const val CONFLICTING_TYPES_ERROR = "The type definition %s conflicts with the inferred type %s."
    const val CONFLICTING_TYPES_FOR_IDENTIFIER_ERROR = "The type definition %s conflicts with the inferred type %s for identifier \"%s\"."
    const val EXPECTED_VALUE_FOR_IDENTIFIER_ERROR = "No value provided for identifier \"%s\"."
    const val TOO_MANY_VALUES_PROVIDED_ERROR = "Too many values provided in function call."
    const val TYPE_INFERENCE_FAIL_ERROR = "Type inference has failed because there is not enough information present." +
            " Please specify the type manually."
    const val INVALID_LITERAL_ERROR = "The literal is invalid."
    const val RETURN_NOT_GUARANTEED_ERROR = "The function is not guaranteed to yield a value."
    const val TYPES_EXHAUSTED_ERROR = "There is no possible type here."
    const val UNKNOWN_IDENTIFIER_ERROR = "Unknown identifier."
    const val UNKNOWN_TYPE_ERROR = "Unknown type."
    const val UNUSED_EXPRESSION_ERROR = "The result of this expression is never used." +
            " Use the 'ignore' function to ignore it."
    const val USED_BEFORE_INITIALIZED_ERROR = "The variable is used before being initialized."
    const val VARIABLE_ALREADY_DECLARED_ERROR = "The variable has already been declared."
    const val WRONG_OPERATION_ERROR = "The operation cannot be executed between types %s and %s."
    const val RECURSIVE_TYPE_DEFINITION_ERROR = "This type definition cannot be computed, as it is recursive."

    // Runtime exceptions
    const val STACK_OVERFLOW_ERROR = "A stack overflow error has occurred."
    const val CANNOT_PERFORM_OPERATION_ERROR = "Cannot perform the operation %s %s %s."
    const val INTEGER_TOO_LARGE_FOR_REPEAT_ERROR = "The integer value is too large for repetition."
    const val CANNOT_REPEAT_NEGATIVE_ERROR = "Cannot repeat a text a negative number of times."
    const val CANNOT_READ_INT_ERROR = "Cannot read integer value."
    const val CANNOT_READ_TEXT_ERROR = "Cannot read text value."
    const val CANNOT_READ_DECIMAL_ERROR = "Cannot read decimal value."
    const val CANNOT_READ_TRUTH_ERROR = "Cannot read truth value."

    // Internal errors
    const val INTERNAL_ERROR = "An internal error has occurred. "
    const val IO_ERROR = "An error has occurred while trying to load the source code file."
    const val CANNOT_BE_PROCESSED_ERROR = "Cannot be processed."
    const val NOT_YET_IMPLEMENTED_ERROR = "Not yet implemented."
    const val MAX_SYMBOL_TOO_LARGE_ERROR = "MAX_SYMBOL_LENGTH is smaller than the length of the largest symbol."
    const val FROZEN_ERROR = "The object's state cannot be edited after it has been frozen."
    const val ERROR_MESSAGE_EXPECTED_ERROR = "Expected an error message."
    const val WHEN_REMOVE_EXPECTED_ERROR = "When to remove token parameter expected."
    const val NOT_ONE_TOKEN_ERROR = "Not one token."
    const val UNKNOWN_SYNTAX_TYPE_ERROR = "Unknown syntax type."
    const val IRREGULAR_STATEMENT_ERROR = "Irregular statement found."
    const val CANNOT_GET_LIST_ELEMENT_TYPE_ERROR = "Couldn't get list's element type."
}